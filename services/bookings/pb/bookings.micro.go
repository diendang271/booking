// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pb/bookings.proto

package bootcamp_srv_bookings

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BookingService service

type BookingService interface {
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...client.CallOption) (*CreateBookingResponse, error)
}

type bookingService struct {
	c    client.Client
	name string
}

func NewBookingService(name string, c client.Client) BookingService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "bootcamp.srv.bookings"
	}
	return &bookingService{
		c:    c,
		name: name,
	}
}

func (c *bookingService) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...client.CallOption) (*CreateBookingResponse, error) {
	req := c.c.NewRequest(c.name, "BookingService.CreateBooking", in)
	out := new(CreateBookingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BookingService service

type BookingServiceHandler interface {
	CreateBooking(context.Context, *CreateBookingRequest, *CreateBookingResponse) error
}

func RegisterBookingServiceHandler(s server.Server, hdlr BookingServiceHandler, opts ...server.HandlerOption) error {
	type bookingService interface {
		CreateBooking(ctx context.Context, in *CreateBookingRequest, out *CreateBookingResponse) error
	}
	type BookingService struct {
		bookingService
	}
	h := &bookingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BookingService{h}, opts...))
}

type bookingServiceHandler struct {
	BookingServiceHandler
}

func (h *bookingServiceHandler) CreateBooking(ctx context.Context, in *CreateBookingRequest, out *CreateBookingResponse) error {
	return h.BookingServiceHandler.CreateBooking(ctx, in, out)
}
